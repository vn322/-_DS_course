--=============== МОДУЛЬ 4. УГЛУБЛЕНИЕ В SQL =======================================
--= ПОМНИТЕ, ЧТО НЕОБХОДИМО УСТАНОВИТЬ ВЕРНОЕ СОЕДИНЕНИЕ И ВЫБРАТЬ СХЕМУ PUBLIC===========
SET search_path TO public;

--======== ОСНОВНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--База данных: если подключение к облачной базе, то создаете новые таблицы в формате:
--таблица_фамилия, 
--если подключение к контейнеру или локальному серверу, то создаете новую схему и в ней создаете таблицы.
CREATE SCHEMA dz3 AUTHORIZATION postgres;

-- Спроектируйте базу данных для следующих сущностей:
-- 1. язык (в смысле английский, французский и тп)
-- 2. народность (в смысле славяне, англосаксы и тп)
-- 3. страны (в смысле Россия, Германия и тп)


--Правила следующие:
-- на одном языке может говорить несколько народностей
-- одна народность может входить в несколько стран
-- каждая страна может состоять из нескольких народностей

 
--Требования к таблицам-справочникам:
-- идентификатор сущности должен присваиваться автоинкрементом
-- наименования сущностей не должны содержать null значения и не должны допускаться дубликаты в названиях сущностей
 
--СОЗДАНИЕ ТАБЛИЦЫ ЯЗЫКИ
create table languageD(
language_id serial primary key,
language_name varchar(50) unique not null
)


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ ЯЗЫКИ

insert into languageD(language_id, language_name)
values
(1, 'russ'),
(2, 'chin'),
(3, 'franc')

--СОЗДАНИЕ ТАБЛИЦЫ НАРОДНОСТИ

create table ethnic(
ethnic_id serial primary key,
ethnic_name varchar(50) unique not null
)


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ НАРОДНОСТИ

insert into ethnic(ethnic_id, ethnic_name)
values
(1, 'russian'),
(2, 'chinese'),
(3, 'franche')

--СОЗДАНИЕ ТАБЛИЦЫ СТРАНЫ
create table countryD (
country_id serial primary key,
country_name varchar(50) not null
)


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СТРАНЫ

insert into countryD(country_id, country_name)
values
(1, 'Russland'),
(2, 'China'),
(3, 'France')

--СОЗДАНИЕ ПЕРВОЙ ТАБЛИЦЫ СО СВЯЗЯМИ
create table populD(
ethnic_id integer not null,
language_id integer,
pop_num integer
)


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СО СВЯЗЯМИ
insert into populD(ethnic_id, language_id, pop_num)
values
(1, 1, 1000),
(2, 2, 3000),
(3, 3, 500)

--СОЗДАНИЕ ВТОРОЙ ТАБЛИЦЫ СО СВЯЗЯМИ
create table countr_lang(
country_id integer not null,
ethnic_id integer,
gebiet varchar(50),
primary key(country_id, ethnic_id),
foreign key(country_id) references countryD(country_id),
foreign key(ethnic_id) references ethnic(ethnic_id)
)


--ВНЕСЕНИЕ ДАННЫХ В ТАБЛИЦУ СО СВЯЗЯМИ
insert into countr_lang(country_id, ethnic_id, gebiet)
values
(1, 1, 'Nord'),
(1, 2, 'Ost'),
(2, 2, 'West')





select * from couynr_lang 


drop table countr_lang 

--======== ДОПОЛНИТЕЛЬНАЯ ЧАСТЬ ==============


--ЗАДАНИЕ №1 
--Создайте новую таблицу film_new со следующими полями:
--·   	film_name - название фильма - тип данных varchar(255) и ограничение not null
--·   	film_year - год выпуска фильма - тип данных integer, условие, что значение должно быть больше 0
--·   	film_rental_rate - стоимость аренды фильма - тип данных numeric(4,2), значение по умолчанию 0.99
--·   	film_duration - длительность фильма в минутах - тип данных integer, ограничение not null и условие, что значение должно быть больше 0
--Если работаете в облачной базе, то перед названием таблицы задайте наименование вашей схемы.



--ЗАДАНИЕ №2 
--Заполните таблицу film_new данными с помощью SQL-запроса, где колонкам соответствуют массивы данных:
--·       film_name - array['The Shawshank Redemption', 'The Green Mile', 'Back to the Future', 'Forrest Gump', 'Schindlers List']
--·       film_year - array[1994, 1999, 1985, 1994, 1993]
--·       film_rental_rate - array[2.99, 0.99, 1.99, 2.99, 3.99]
--·   	  film_duration - array[142, 189, 116, 142, 195]



--ЗАДАНИЕ №3
--Обновите стоимость аренды фильмов в таблице film_new с учетом информации, 
--что стоимость аренды всех фильмов поднялась на 1.41



--ЗАДАНИЕ №4
--Фильм с названием "Back to the Future" был снят с аренды, 
--удалите строку с этим фильмом из таблицы film_new



--ЗАДАНИЕ №5
--Добавьте в таблицу film_new запись о любом другом новом фильме



--ЗАДАНИЕ №6
--Напишите SQL-запрос, который выведет все колонки из таблицы film_new, 
--а также новую вычисляемую колонку "длительность фильма в часах", округлённую до десятых



--ЗАДАНИЕ №7 
--Удалите таблицу film_new



Здравствуйте, Алексей!

Спасибо за проделанную работу, Вы хорошо справились с созданием и заполнением данными таблиц-справочников, верно использовали все необходимые атрибуты для полей таблиц-справочников.

Но ответ нужно немного доработать, чтобы таблицы со связями были спроектированы наиболее оптимальным способом и в соответствии с условием задания.

Таблица со связями populD для связи народностей и языков создана верно. Вторая таблица со связями должна также содержать пару идентификаторов сущностей согласно правилам задания:
одна народность может входить в несколько стран
каждая страна может состоять из нескольких народностей
Связывать все три сущности в одной таблицы не самый верный вариант, учитывая правила.
Создайте внешние связи от полей таблиц со связями к полям таблиц-справочников. Внешние связи обеспечивают целостность базы данных. Если есть внешняя связь, то в таблицу со связями нельзя будет вставить идентификатор, которого нет в таблице-справочнике, и наоборот, нельзя удалить из таблицы-справочника строку с идентификатором, который используется в связанных таблицах. Без внешних связей может произойти потеря данных в одной таблице, но эти данные могут присутствовать в других таблицах, это очень важный момент. Пример создания внешних связей есть в презентации к модулю слайды 29-30.
В таблицах со связями сделать составные первичные ключи, чтобы обеспечить уникальность пар идентификаторов в таблице. Пример создания составных первичных ключей есть в презентации к модулю слайд 28.
Заполните таблицы со связями данными.
Внесите доработки согласно рекомендациям и отправляйте повторно на проверку.

С уважением, Екатерина


Здравствуйте, Алексей!

Таблица со связями countr_lang спроектирована верно, правильно созданы внешние связи и составной первичный ключ. Таблица со связями populD должна быть такой же по структуре с внешними связями и первичным ключом.

Учитывайте это при проектировании таблиц, не забывайте про первичные ключи, внешние связи и атрибуты для полей таблиц.

Домашнее задание зачтено. Желаю успехов в изучении следующих тем курса!

С уважением, Екатерина
